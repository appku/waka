#!/bin/bash

set -eu -o pipefail
exec 3>&1 # stdout goes under specifically fd 3
exec 1>&2 # all output to stderr, used for logging

# switch to working location of job
cd "$1"

#dump stdin json to file
set +e
IFS= read -t 10 -r -d '' STDIN_DATA
set -e
[[ -n "$STDIN_DATA" ]] && printf "%s" "$STDIN_DATA" > /tmp/stdin.json

#gather variables
JSON_OUT='{ "version": {}, "metadata": [] }'
SOURCE_DEBUG=$(jq ".source.debug" -r /tmp/stdin.json)
SOURCE_HOST=$(jq ".source.host // \"localhost\"" -r /tmp/stdin.json)
SOURCE_APPS_REGISTRY_HOST=$(jq ".source.apps.registry // \"registry.$SOURCE_HOST\"" -r /tmp/stdin.json)
SOURCE_APPS_USERNAME=$(jq ".source.apps.username // \"appku\"" -r /tmp/stdin.json)
SOURCE_APPS_PASSWORD=$(jq ".source.apps.password // \"\"" -r /tmp/stdin.json)
PARAMS_CLEAN_DOCKER_SYSTEM=$(jq ".params.docker // true" -r /tmp/stdin.json)
PARAMS_CLEAN_DOCKER_REGISTRY=$(jq ".params.registry // true" -r /tmp/stdin.json)
if [[ "$SOURCE_DEBUG" == 'true' ]]; then
    echo "Debug mode enabled."
    # printf "OUT Pipeline JSON:\n$(cat /tmp/stdin.json)\n"
    echo "## Job"
    echo "BUILD_TEAM_ID = $BUILD_TEAM_ID"
    echo "BUILD_TEAM_NAME = $BUILD_TEAM_NAME"
    echo "BUILD_PIPELINE_ID = $BUILD_PIPELINE_ID"
    echo "BUILD_PIPELINE_NAME = $BUILD_PIPELINE_NAME"
    echo "BUILD_JOB_ID = $BUILD_JOB_ID"
    echo "BUILD_JOB_NAME = $BUILD_JOB_NAME"
    echo "BUILD_ID = $BUILD_ID"
    echo "BUILD_NAME = $BUILD_NAME"
    echo
    echo "## Source"
    echo "SOURCE_DEBUG = $SOURCE_DEBUG"
    echo "SOURCE_HOST = $SOURCE_HOST"
    echo "SOURCE_APPS_REGISTRY_HOST = $SOURCE_APPS_REGISTRY_HOST"
    echo "SOURCE_APPS_USERNAME = $SOURCE_APPS_USERNAME"
    if [[ -n "$SOURCE_APPS_PASSWORD" ]]; then
        echo "SOURCE_APPS_PASSWORD = *********"
    else
        echo "SOURCE_APPS_PASSWORD = {NOT SET}"
    fi
    echo
    echo "## Versions"
    echo "AppKu™ Waka Version = $APPKU_WAKA_VERSION"
    echo "Docker Version = $(docker --version)"
    echo
    echo "## System"
    echo "Running tree from current path '$(pwd)':"
    echo "**Note** Ignoring hidden, node_modules/, coverage/, log/, docs/, obj/ directories."
    tree -I 'node_modules|coverage|Log|log|Docs|docs|Obj|obj'
fi

# ssh prep
echo "Adding service account ssh key."
jq ".source.apps.key" -r /tmp/stdin.json > ~/.ssh/id_rsa
echo "Adding AppKu™ host as known-host."
ssh-keyscan -H "$SOURCE_HOST" &> /dev/null > ~/.ssh/known_hosts
echo "Ensuring permissions."
chmod 700 ~/.ssh && chmod 600 ~/.ssh/id_rsa

# connect to remote docker system
echo "Creating docker context."
docker context create appku --docker "host=ssh://$SOURCE_APPS_USERNAME@$SOURCE_HOST" &>> appku.log
echo "Switching to docker context."
docker context use appku &>> appku.log
JSON_OUT=$(echo "$JSON_OUT" | jq ".metadata |= .+ [{ \"name\": \"AppKu™ Host\", \"value\": \"$SOURCE_HOST\" }]")

if [[ "$PARAMS_CLEAN_DOCKER_SYSTEM" == "true" ]]; then
    echo -e "\nPerforming docker housekeeping..."
    set +o pipefail
    echo "➔ Containers."
    yes | docker container prune --filter until=48h
    echo "➔ Images."
    yes | docker image prune --all --filter until=48h
    echo "➔ Volumes."
    yes | docker volume prune
    echo "➔ Networks."
    yes | docker network prune --filter until=48h
    echo "➔ Build cache."
    yes | docker builder prune --filter until=4h
fi
# if [[ "$PARAMS_CLEAN_DOCKER_REGISTRY" == "true" ]]; then
    #TODO
# fi

# job return
echo -e "\nHousecleaning complete."
echo "$JSON_OUT" >&3