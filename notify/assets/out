#!/bin/bash

set -eu -o pipefail
exec 3>&1 # stdout goes under specifically fd 3
exec 1>&2 # all output to stderr, used for logging

# switch to working location of job
cd "$1"

#dump stdin json to file
set +e
IFS= read -t 10 -r -d '' STDIN_DATA
set -e
[[ -n "$STDIN_DATA" ]] && printf "%s" "$STDIN_DATA" > /tmp/stdin.json

#gather variables
JSON_OUT='{ "version": {}, "metadata": [] }'
SOURCE_DEBUG=$(jq ".source.debug" -r /tmp/stdin.json)
SOURCE_PROVIDER=$(jq ".source.provider // \"google-chat\"" -r /tmp/stdin.json)
SOURCE_URI=$(jq ".source.uri // \"\"" -r /tmp/stdin.json)
SOURCE_HOST=$(jq ".source.host // \"localhost\"" -r /tmp/stdin.json)
SOURCE_APPS_JIDO_HOST=$(jq ".source.apps.jido // \"jido.$SOURCE_HOST\"" -r /tmp/stdin.json)
PARAMS_TITLE=$(jq ".params.title // \"AppKu™ Notification\"" -r /tmp/stdin.json)
PARAMS_SUBTITLE=$(jq ".params.subtitle // \"\"" -r /tmp/stdin.json)
PARAMS_ICON=$(jq ".params.icon // \"\"" -r /tmp/stdin.json)
PARAMS_MESSAGE=$(jq ".params.message // \"\"" -r /tmp/stdin.json)
PARAMS_FORMAT=$(jq ".params.format // \"jido\"" -r /tmp/stdin.json)
if [[ -z "$SOURCE_URI" ]]; then
    echo -e "\033[0;31mThe 'uri' resource property must be set.\033[0m"
    exit 1
fi
if [[ "$SOURCE_PROVIDER" != "google-chat" && "$SOURCE_PROVIDER" != "none" ]]; then
    echo -e "\033[0;31mThe 'provider' resource property must be either 'google-chat' (default) or 'none'.\033[0m"
    exit 1
fi
if [[ "$PARAMS_FORMAT" != "jido" && "$PARAMS_FORMAT" != "custom" ]]; then
    echo -e "\033[0;31mThe 'provider' resource property must be either 'jido' (default) or 'custom'.\033[0m"
    exit 1
fi
if [[ "$SOURCE_DEBUG" == 'true' ]]; then
    echo "Debug mode enabled."
    # printf "OUT Pipeline JSON:\n$(cat /tmp/stdin.json)\n"
    echo "## Pipeline Build"
    echo "BUILD_TEAM_ID = $BUILD_TEAM_ID"
    echo "BUILD_TEAM_NAME = $BUILD_TEAM_NAME"
    echo "BUILD_PIPELINE_ID = $BUILD_PIPELINE_ID"
    echo "BUILD_PIPELINE_NAME = $BUILD_PIPELINE_NAME"
    echo "BUILD_JOB_ID = $BUILD_JOB_ID"
    echo "BUILD_JOB_NAME = $BUILD_JOB_NAME"
    echo "BUILD_ID = $BUILD_ID"
    echo "BUILD_NAME = $BUILD_NAME"
    echo
    echo "## Source"
    echo "SOURCE_DEBUG = $SOURCE_DEBUG"
    echo "SOURCE_PROVIDER = $SOURCE_PROVIDER"
    echo "SOURCE_URI = $SOURCE_URI"
    echo "SOURCE_HOST = $SOURCE_HOST"
    echo "SOURCE_APPS_JIDO_HOST = $SOURCE_APPS_JIDO_HOST"
    echo
    echo "## Parameters"
    echo "PARAMS_ICON = $PARAMS_ICON"
    echo "PARAMS_TITLE = $PARAMS_TITLE"
    echo "PARAMS_MESSAGE = $PARAMS_MESSAGE"
    echo "PARAMS_FORMAT = $PARAMS_FORMAT"
    echo
    echo "## Versions"
    echo "AppKu™ Waka Version = $APPKU_WAKA_VERSION"
    echo "Docker Version = $(docker --version)"
    echo
    echo "## System"
    echo "Running tree from current path '$(pwd)':"
    echo "**Note** Ignoring hidden, node_modules/, coverage/, log/, docs/, obj/ directories."
    tree -I 'node_modules|coverage|Log|log|Docs|docs|Obj|obj'
fi

# prepare message
if [[ "$PARAMS_FORMAT" == "jido" ]]; then
    if [[ -n "$PARAMS_TITLE" ]]; then
        PARAMS_TITLE="AppKu™ Jido™"
    fi
    if [[ -z "$PARAMS_MESSAGE" ]]; then
        PARAMS_MESSAGE="Job \"$BUILD_JOB_NAME\" on Build $BUILD_NAME"
        if [[ -n "${BUILD_CREATED_BY-}" ]]; then
            PARAMS_MESSAGE="$PARAMS_MESSAGE by ${BUILD_CREATED_BY-}"
        fi
    fi
fi

PARAMS_TITLE=$(echo "$PARAMS_TITLE" | sed 's/"/\\"/g') \
PARAMS_SUBTITLE=$(echo "$PARAMS_SUBTITLE" | sed 's/"/\\"/g') \
PARAMS_ICON="$PARAMS_ICON" \
PARAMS_MESSAGE=$(echo "$PARAMS_MESSAGE" | sed 's/"/\\"/g') \
PARAMS_FORMAT="$PARAMS_FORMAT" \
BUILD_TEAM_ID="$BUILD_TEAM_ID" \
BUILD_TEAM_NAME="$BUILD_TEAM_NAME" \
BUILD_PIPELINE_ID="$BUILD_PIPELINE_ID" \
BUILD_PIPELINE_NAME="$BUILD_PIPELINE_NAME" \
BUILD_JOB_ID="$BUILD_JOB_ID" \
BUILD_JOB_NAME="$BUILD_JOB_NAME" \
BUILD_ID="$BUILD_ID" \
BUILD_NAME="$BUILD_NAME" \
JIDO_HOST="https://$SOURCE_APPS_JIDO_HOST" \
    envsubst < "/waka/formats/$SOURCE_PROVIDER-$PARAMS_FORMAT.json" > /waka/send.json

# sending message
curl -X POST -H "Content-Type: application/json" -d @/waka/send.json "$SOURCE_URI"
JSON_OUT=$(echo "$JSON_OUT" | jq ".metadata |= .+ [{ \"name\": \"Provider\", \"value\": \"$SOURCE_PROVIDER\" }]")

# job return
echo -e "\nDone."
echo "$JSON_OUT" >&3