#!/bin/bash

set -eu -o pipefail
exec 3>&1 # stdout goes under specifically fd 3
exec 1>&2 # all output to stderr, used for logging

# switch to working location of job
cd "$1"

#dump stdin json to file
set +e
IFS= read -t 10 -r -d '' STDIN_DATA
set -e
[[ -n "$STDIN_DATA" ]] && printf "%s" "$STDIN_DATA" > /tmp/stdin.json

#gather variables
JSON_OUT='{ "version": {}, "metadata": [] }'
SOURCE_DEBUG=$(jq ".source.debug" -r /tmp/stdin.json)
SOURCE_HOST=$(jq ".source.host // \"localhost\"" -r /tmp/stdin.json)
SOURCE_CERT=$(jq ".source.cert // \"\"" -r /tmp/stdin.json)
SOURCE_APPS_REGISTRY_HOST=$(jq ".source.apps.registry // \"registry.$SOURCE_HOST\"" -r /tmp/stdin.json)
SOURCE_APPS_JIDO_HOST=$(jq ".source.apps.jido // \"jido.$SOURCE_HOST\"" -r /tmp/stdin.json)
SOURCE_APPS_USERNAME=$(jq ".source.apps.username // \"appku\"" -r /tmp/stdin.json)
SOURCE_APPS_PASSWORD=$(jq ".source.apps.password // \"\"" -r /tmp/stdin.json)
PARAMS_SOURCE=$(jq ".params.source" -r /tmp/stdin.json)
PARAMS_JIDO_ENABLED=$(jq ".params | has(\"jido\")" -r /tmp/stdin.json)
PARAMS_JIDO_PIPELINE=$(jq ".params.jido.pipeline // \"\"" -r /tmp/stdin.json)
PARAMS_COMPOSE_ENABLED=$(jq ".params | has(\"compose\")" -r /tmp/stdin.json)
PARAMS_COMPOSE_FILE=$(jq ".params.compose.file // \"docker-compose.yml\"" -r /tmp/stdin.json)
PARAMS_COMPOSE_TAG=$(jq ".params.compose.tag // \"\"" -r /tmp/stdin.json)
PARAMS_COMPOSE_TAG_FILE=$(jq ".params.compose.tag_file // \"\"" -r /tmp/stdin.json)
PARAMS_COMPOSE_TIMEOUT=$(jq ".params.compose.timeout // 15" -r /tmp/stdin.json)
PARAMS_COMPOSE_NUKE_ORPHANS=$(jq ".params.compose.nuke_orphans // true" -r /tmp/stdin.json)
PARAMS_COMPOSE_RECREATE=$(jq ".params.compose.recreate // true" -r /tmp/stdin.json)
PARAMS_COMPOSE_ENV_OUTPUT="$(jq ".params.compose.envout // \"\"" -r /tmp/stdin.json)"
PARAMS_COMPOSE_ENV="$(jq ".params.compose.env // \"\"" -r /tmp/stdin.json)"
if [[ -z "$PARAMS_SOURCE" ]]; then
    echo -e "\033[0;31mThe 'source' step parameter must be set.\033[0m"
    exit 1
fi
if [[ -n "$PARAMS_COMPOSE_TAG" && -n "$PARAMS_COMPOSE_TAG_FILE" ]]; then
    echo -e "\033[0;31mOnly the 'tag' or 'tag_file' step parameter must be set, using both is not allowed.\033[0m"
    exit 1
fi
if [[ -n "$PARAMS_COMPOSE_ENV" ]]; then
    PARAMS_COMPOSE_ENV_KEYS=($(</tmp/stdin.json jq -r ".params.compose.env | keys | @tsv | gsub(\"\\t\";\" \")"))
fi
if [[ -n "$PARAMS_COMPOSE_ENV_OUTPUT" ]]; then
    PARAMS_COMPOSE_ENV_OUTPUT_KEYS=($(</tmp/stdin.json jq -r ".params.compose.envout | @tsv | gsub(\"\\t\";\" \")"))
fi
if [[ "$SOURCE_DEBUG" == 'true' ]]; then
    echo "Debug mode enabled."
    # printf "OUT Pipeline JSON:\n$(cat /tmp/stdin.json)\n"
    echo "## Job"
    echo "BUILD_TEAM_ID = $BUILD_TEAM_ID"
    echo "BUILD_TEAM_NAME = $BUILD_TEAM_NAME"
    echo "BUILD_PIPELINE_ID = $BUILD_PIPELINE_ID"
    echo "BUILD_PIPELINE_NAME = $BUILD_PIPELINE_NAME"
    echo "BUILD_JOB_ID = $BUILD_JOB_ID"
    echo "BUILD_JOB_NAME = $BUILD_JOB_NAME"
    echo "BUILD_ID = $BUILD_ID"
    echo "BUILD_NAME = $BUILD_NAME"
    echo
    echo "## Source"
    echo "SOURCE_DEBUG = $SOURCE_DEBUG"
    echo "SOURCE_HOST = $SOURCE_HOST"
    if [[ -n "$SOURCE_CERT" ]]; then
        echo "SOURCE_CERT = *********"
    else
        echo "SOURCE_CERT = {NOT SET}"
    fi
    echo "SOURCE_APPS_REGISTRY_HOST = $SOURCE_APPS_REGISTRY_HOST"
    echo "SOURCE_APPS_JIDO_HOST = $SOURCE_APPS_JIDO_HOST"
    echo "SOURCE_APPS_USERNAME = $SOURCE_APPS_USERNAME"
    if [[ -n "$SOURCE_APPS_PASSWORD" ]]; then
        echo "SOURCE_APPS_PASSWORD = *********"
    else
        echo "SOURCE_APPS_PASSWORD = {NOT SET}"
    fi
    echo
    echo "## Parameters"
    echo "PARAMS_JIDO_ENABLED = $PARAMS_JIDO_ENABLED"
    echo "PARAMS_JIDO_PIPELINE = $PARAMS_JIDO_PIPELINE"
    echo "PARAMS_SOURCE = $PARAMS_SOURCE"
    echo "PARAMS_COMPOSE_ENABLED = $PARAMS_COMPOSE_ENABLED"
    echo "PARAMS_COMPOSE_FILE = $PARAMS_COMPOSE_FILE"
    echo "PARAMS_COMPOSE_TAG = $PARAMS_COMPOSE_TAG"
    echo "PARAMS_COMPOSE_TAG_FILE = $PARAMS_COMPOSE_TAG_FILE"
    echo "PARAMS_COMPOSE_TIMEOUT = $PARAMS_COMPOSE_TIMEOUT"
    echo "PARAMS_COMPOSE_NUKE_ORPHANS = $PARAMS_COMPOSE_NUKE_ORPHANS"
    echo "PARAMS_COMPOSE_RECREATE = $PARAMS_COMPOSE_RECREATE"
    if [[ -n "$PARAMS_COMPOSE_ENV_OUTPUT" ]]; then
        echo "PARAMS_COMPOSE_ENV_OUTPUT = {SET}"
        for i in "${PARAMS_COMPOSE_ENV_OUTPUT_KEYS[@]}"
        do
            echo " ➔ $i"
        done
    else
        echo "PARAMS_COMPOSE_ENV = {NOT SET}"
    fi
    if [[ -n "$PARAMS_COMPOSE_ENV" ]]; then
        echo "PARAMS_COMPOSE_ENV = {SET}"
        for i in "${PARAMS_COMPOSE_ENV_KEYS[@]}"
        do
            if [[ -n "$i" && "$i" != "HOME" && "$i" != "PATH" && "$i" != "PWD" && "$i" != "SHLVL" && "$i" != "DOCKER_HOST" ]]; then
                echo " ➔ $i"
            fi
        done
    else
        echo "PARAMS_COMPOSE_ENV = {NOT SET}"
    fi
    echo
    echo "## Versions"
    echo "AppKu™ Waka Version = $APPKU_WAKA_VERSION"
    echo "Docker Version = $(docker --version)"
    echo
    echo "## System"
    echo "Running tree from current path '$(pwd)':"
    echo "**Note** Ignoring hidden, node_modules/, coverage/, log/, docs/, obj/ directories."
    tree -I 'node_modules|coverage|Log|log|Docs|docs|Obj|obj'
fi

# add certificate authority
if [[ -n "${SOURCE_CERT-}" ]]; then
    cat << EOF > /usr/local/share/ca-certificates/ca.pem
${SOURCE_CERT}
EOF
    cat /usr/local/share/ca-certificates/ca.pem >> /etc/ssl/certs/ca-certificates.crt
fi

# ssh prep
echo "Adding service account ssh key."
jq ".source.apps.key" -r /tmp/stdin.json > ~/.ssh/id_rsa
echo "Adding AppKu™ host as known-host."
ssh-keyscan -H "$SOURCE_HOST" &> /dev/null > ~/.ssh/known_hosts
echo "Ensuring permissions."
chmod 700 ~/.ssh && chmod 600 ~/.ssh/id_rsa

# connect to remote docker system
echo "Logging into registry."
echo "$SOURCE_APPS_PASSWORD" | docker login --username "$SOURCE_APPS_USERNAME" --password-stdin "$SOURCE_APPS_REGISTRY_HOST"
echo "Creating docker context."
docker context create appku --docker "host=ssh://$SOURCE_APPS_USERNAME@$SOURCE_HOST" &>> appku.log
echo "Switching to docker context."
docker context use appku &>> appku.log
JSON_OUT=$(echo "$JSON_OUT" | jq ".metadata |= .+ [{ \"name\": \"AppKu™ Host\", \"value\": \"$SOURCE_HOST\" }]")


if [[ "$PARAMS_JIDO_ENABLED" == "true" ]]; then
    cd "$(realpath $PARAMS_SOURCE)"
    if [[ -f "$PARAMS_JIDO_PIPELINE" ]]; then
        JIDO_PIPELINE_DIR=`dirname $(realpath "$PARAMS_JIDO_PIPELINE")`
        echo "Retrieving remote AppKu™ Jido™ fly client."
        curl -o /tmp/fly -s -L "https://$SOURCE_APPS_JIDO_HOST/api/v1/cli?arch=amd64&platform=linux"
        chmod +x /tmp/fly
        echo "Performing login."
        /tmp/fly -t main login --team-name main --concourse-url "https://$SOURCE_APPS_JIDO_HOST"
    else
        echo -e "\033[0;31mAppKu™ Jido™ path '$JIDO_PIPELINE_DIR' is not pointing to a valid file.\033[0m"
        exit 1
    fi
fi
if [[ "$PARAMS_COMPOSE_ENABLED" == "true" ]]; then
    # docker compose deploy
    echo "Running docker compose deployment from source '$(realpath $PARAMS_SOURCE)'."
    if [[ -n "$PARAMS_COMPOSE_TAG_FILE" ]]; then
        if [[ ! -f "$PARAMS_COMPOSE_TAG_FILE" ]]; then
            #file not found at init path, try source path
            pushd "$(realpath $PARAMS_SOURCE)"
            if [[ -f "$PARAMS_COMPOSE_TAG_FILE" ]]; then
                PARAMS_COMPOSE_TAG_FILE=$(realpath $PARAMS_COMPOSE_TAG_FILE)
                echo "Tag file not found while under working directory path, found under source path: $PARAMS_COMPOSE_TAG_FILE"
            fi
            popd
        fi
        TEMP_PARAMS_COMPOSE_TAG=$(cat "$PARAMS_COMPOSE_TAG_FILE")
        if [[ -n "$TEMP_PARAMS_COMPOSE_TAG" ]]; then
            PARAMS_COMPOSE_TAG="$TEMP_PARAMS_COMPOSE_TAG"
        fi
    fi
    cd "$(realpath $PARAMS_SOURCE)"
    # extra validation
    COMPOSE_PROJECT=$(yq ".name // \"\"" "$PARAMS_COMPOSE_FILE")
    if [[ -z "$COMPOSE_PROJECT" ]]; then
        echo -e "\033[0;31mDocker compose file '$PARAMS_COMPOSE_FILE' is missing the 'name' value, which is required by AppKu™.\033[0m"
        exit 1
    fi
    # deploy compose file
    touch /tmp/compose.env
    if [[ -n "$PARAMS_COMPOSE_TAG" ]]; then
        echo "TAG=$PARAMS_COMPOSE_TAG" >> /tmp/compose.env
        echo "IMAGE_TAG=$PARAMS_COMPOSE_TAG" >> /tmp/compose.env
    fi
    if [[ -n "$PARAMS_COMPOSE_ENV" ]]; then
        for i in "${PARAMS_COMPOSE_ENV_KEYS[@]}"
        do
            if [[ -n "$i" && "$i" != "HOME" && "$i" != "PATH" && "$i" != "PWD" && "$i" != "SHLVL" && "$i" != "DOCKER_HOST" ]]; then
                # capture the env value and escape "$" with "$$" for docker
                PARAMS_COMPOSE_ENV_VALUE="$(jq ".params.compose.env.$i // \"\"" -r /tmp/stdin.json | sed -r 's/\$/\$\$/g')"
                echo "$i=$PARAMS_COMPOSE_ENV_VALUE" >> /tmp/compose.env
                echo "Added env to /tmp/compose.env: \"$i\"=\"$PARAMS_COMPOSE_ENV_VALUE\"" >> appku.log
            fi
        done
    fi
    COMPOSE_ARGS=()
    if [[ "$PARAMS_COMPOSE_NUKE_ORPHANS" == "true" ]]; then
        COMPOSE_ARGS+=(--remove-orphans)
    fi
    if [[ "$PARAMS_COMPOSE_RECREATE" == "true" ]]; then
        COMPOSE_ARGS+=(--force-recreate)
    fi
    docker compose --env-file /tmp/compose.env -f "$PARAMS_COMPOSE_FILE" up "${COMPOSE_ARGS[@]}" -d -t $PARAMS_COMPOSE_TIMEOUT
    echo "Docker compose deployment complete. Result was: $?"
    JSON_OUT=$(echo "$JSON_OUT" | jq ".version.ref = \"$COMPOSE_PROJECT\"")
    JSON_OUT=$(echo "$JSON_OUT" | jq ".metadata |= .+ [{ \"name\": \"AppKu™ Compose Deploy\", \"value\": \"$COMPOSE_PROJECT\" }]")

    # additional outputs
    if [[ -n "$PARAMS_COMPOSE_ENV_OUTPUT" ]]; then
        set +e
        for i in "${PARAMS_COMPOSE_ENV_OUTPUT_KEYS[@]}"
        do
            ENV_OUTPUT_VALUE=$(grep -o "$i=.*" /tmp/compose.env | cut -f2- -d=)
            if [ $? -eq 0 ]; then
                JSON_OUT=$(echo "$JSON_OUT" | jq ".metadata |= .+ [{ \"name\": \"$i\", \"value\": \"$ENV_OUTPUT_VALUE\" }]")
            else
                echo "Failed to output docker compose env: \"$i\""
                echo "Are you sure it's in the docker compose file \"$PARAMS_COMPOSE_FILE\"?"
            fi
        done
        set -e
    fi
fi

# job return
echo -e "\nDone."
echo "$JSON_OUT" >&3