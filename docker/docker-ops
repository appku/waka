#!/bin/bash 

# Copyright AppKu
# https://github.com/appku/waka

set -eu -o pipefail

# validate required env
if [[ -z "${IMAGE:-}" ]]; then
    echo "Missing required ENV variable value: IMAGE"
    exit 1
fi
if [[ -n "${DOCKER_REGISTRY_USER:-}" ]] && [[ -z "${DOCKER_REGISTRY_PASSWORD:-}" ]]; then
    echo "Missing ENV variable value: DOCKER_REGISTRY_PASSWORD"
    exit 2
fi
# add certificate authority
if [[ -n "${DOCKER_REGISTRY_CA_PEM:-}" ]]; then
    echo "Adding CA certificate."
    cat << EOF > /usr/local/share/ca-certificates/ca.pem
${DOCKER_REGISTRY_CA_PEM}
EOF
    cat /usr/local/share/ca-certificates/ca.pem >> /etc/ssl/certs/ca-certificates.crt
fi
# verify login
if [[ -n "${DOCKER_REGISTRY_USER:-}" ]]; then
    echo "Logging into registry \"${DOCKER_REGISTRY:-dockerhub}\"."
    if [[ -n "${DOCKER_REGISTRY:-}" ]] || [[ -n "${REMOTE_DOCKER_HOST:-}" ]]; then
        #other registry
        echo "$DOCKER_REGISTRY_PASSWORD" | docker login --username "$DOCKER_REGISTRY_USER" --password-stdin "${DOCKER_REGISTRY:-$REMOTE_DOCKER_HOST}"
    else
        #dockerhub
        echo "$DOCKER_REGISTRY_PASSWORD" | docker login --username "$DOCKER_REGISTRY_USER" --password-stdin
    fi
fi
# build
PACKAGE_VERSION=$(awk -F'"' '/"version": ".+"/{ print $4; exit; }' package.json)
if [[ -z "${IMAGE_TAG:-}" ]]; then
    if [[ -z "$PACKAGE_VERSION" ]]; then
        echo "Building image with :latest tag"
        docker build . -t "$IMAGE:latest"
    else
        echo "Building image with :latest and :$PACKAGE_VERSION tag"
        docker build . -t "$IMAGE:latest" -t "$IMAGE:$PACKAGE_VERSION"
    fi
else
    echo "Building image with :$IMAGE_TAG tag"
    docker build . -t "$IMAGE:$IMAGE_TAG"
fi
# push
docker push -a "$IMAGE"